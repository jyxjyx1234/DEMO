这里目前是一个框架，根据本人的经验，制作的一个有许多“选择枝”的流程图。其中的具体教程内容我会逐步进行补全和修改，然后补充上超链接，也可能直接引用其他站友发布的教程，所以这也算是一个todo list。

当遇到心仪的游戏时，只需要按照这个流程图，一步步跳转，按照流程进行分析，最后就能完成补丁的制作了，很简单吧

制作这个教程的初衷是，讲解一下拿到一个galgame后，去实现中文化的一个整体的分析思路和流程——如何去查找资料、寻找工具；以及更重要的，在没有资料、工具时该如何挣扎尝试。很多引擎就是很阴间，所以理所当然的，这个流程图里的步骤有有手就行的，也有难度很高的。按照我个人的标准，将难度划分为了1-5级：
[1] 傻瓜式，有手就行
[2] 需要仔细阅读一些文档，按照说明进行较为复杂的操作
[3] 需要根据基本的说明文档，自己进行分析
[4] 需要自己编写简单的代码，或者进行简单的逆向分析
[5] 需要编写较为复杂的代码，进行较复杂的逆向分析
[5+] 加油~ 可能把游戏移动到回收站是个不错的选择（雾）
很多地方我会提供多种可能的处理方法（但是代价是什么呢），大家可以按需取用。如果遇到卡住的步骤也不要气馁，可以发帖找大佬代劳，也可以先放在一边，之后经验丰富了说不定就能有所突破了。
对于需要自己编写代码的部分，我无法提供手把手的教学，只会提供一个思路。但是现在AI编程能力已经很不错了，只要知道自己想干什么，具体的实现基本都可以交给AI了，所以就算编程知识薄弱也可以尝试一下~
本教程的目标是内嵌补丁，使用galtransl之类的进行外挂式翻译这里不会涉及。
本教程基本不涉及对游戏自有图片格式的处理以及修图等教程。（之后有可能会找大佬补充？）
下面就让我们开始从入门到入土的补丁制作之旅吧~

0 判断引擎
    （[1]教程01：如何判断引擎？通常怎么查找相应引擎可用的工具？）
    0-1：有成熟的教程 -> 去看相应的教程，再见。不过如果愿意自己分析当作练习，当然十分推荐，这样做的收获会非常大！
    0-2：没有成熟的教程 -> 很遗憾，从1开始看吧~ 不过使用找到的一些工具可以帮助你在下面一些流程中逃课，自行判断，为了简洁起见下文不会提到用现有工具逃课的情况。

1 解包
    （[1]教程02：常见解包工具介绍）
    1-0：文本没有封包 -> 恭喜你，进入2吧~ 但是先别高兴太早~
    1-1：现有工具能进行解包 -> 恭喜你，进入2吧~
    1-2：现有工具无法进行解包
    （[3]教程03：常见的封包结构）
        1-2-1：没有进行加密 -> 恭喜，尝试[4]编写简单的解包代码，然后进入2吧~
        1-2-2：进行了加密或压缩
            （[3]教程04：常见的加密和压缩，以及通过猜测解决加密的一些经验谈）
            1-2-2-1：尝试[3]根据教程04猜测或[5+]逆向分析封包的加密和压缩，[4]编写解包代码，直接跳转到3
            1-2-2-2：尝试[5]编写hook代码实现文本提取和替换，绕开烦人的加密吧~ 然后可以直接跳转到4，并且可以跳过5
            1-2-2-3：尝试从内存中[5]提取解密后的脚本文件，并编写hook代码实现免封包、免加密，绕开烦人的加密吧~ 然后可以直接跳转到3，并且可以跳过5
            （[4或5]外传：x64dbg的一些基本操作）
            （[5]教程05：利用hook进行文本替换）
            （[5]教程06：利用hook实现免封包、免加密）
    1-3 坏消息，甚至没能找到文本封包！ -> 跳转至1-2-2-2


2 文本解密
    （[2] 外传：二进制编辑器的使用）
    2-1：脚本没有加密，为明文 -> 恭喜你，直接跳转到3
    2-2 坏消息！没有明文！脚本可能经过了加密~ -> 真遗憾~ 这种情况和1-2-2的处理基本相同。不过参考一下教程09在一些情况下有可能能够提供帮助——先验信息越多，越容易猜测或分析出加密的形式。

3 文本提取和导入
    3-1-1：为纯文本！
        3-1-1-1：[2或3]使用Sextractor提取和导入文本 -> 跳转到4吧
        （[2或3]教程07：Sextractor的使用）
        3-1-1-2: [4]自行编写脚本提取和导入文本 -> 如果有能力的话可以尽量试试！跳转到4吧
    3-1-2：为二进制虚拟机脚本！
    （[3、4或5] 教程08：常见的二进制虚拟机脚本结构，以及文本提取和替换思路）
        3-1-2-1：[2或3]使用Sextractor提取和导入文本 -> 代价是，很多情况下需要对文本进行截断，比原文更长的句子会无法正常显示。跳转到4吧
        3-1-2-2: [4或5]自行编写脚本提取和导入文本 -> 如果有能力的话可以尽量试试！跳转到4吧
        3-1-2-3：尝试[5]编写hook代码实现文本提取和替换，绕开烦人的虚拟机脚本分析吧~ 这个方法永远是一个备选项~ 虽然是难度5，但是很多时候往往是比2-1-1-2更简单的！跳转到4，并且可以跳过5

3.5 AI翻译

这部分的教程交给依依了~

值得注意的一点是，AI对于处理文本中注音、格式化符号、文本内控制代码等的能力较弱，如果使用的是galtransl，提取文本时建议将这些去除掉，然后之后再想办法自动恢复。据说neavo佬的 LinguaGacha 能够自动的对这些部分进行处理，如果遇到相关的困难可以尝试一下~

4 编码处理、字体处理
    （[3] 教程09：编码知识科普）
    4-1-1：程序原生支持中文 -> 恭喜，可以直接跳转到5了！
    4-1-2：程序不支持中文
        4-1-2-1：程序没有使用的是系统字体，或支持中文汉字的非标准格式字体 -> [4]编写代码或[2]使用相关工具解决吧，然后跳转到5。
        （[2或4] 教程10：解决编码问题的常见思路和工具）
        4-1-2-2：程序使用了非标准格式字体！-> [4]编写代码重构字体，然后跳转到5。
        （[4或……5+]教程11：常见的非标准格式内置字体的处理和放弃思路）

5 封包
    5-1：[1]有现有封包工具！->好好好
    5-2：没有现有封包工具
        （教程12：[1]关于免封包的一些知识和资料收集）
        5-2-1：[1]可以免封包！->好好好
        5-2-2：封包没有加密和压缩！[4]参考教程3自行编写代码吧。
        5-2-3：封包有加密和\或压缩！
            5-2-3-1：[4]如果之前分析出了加密和\或压缩的方法，大部分情况下封包的代码也不会难！
            5-2-3-2：[4]可以尝试从garbro等解包工具的源码中分析封包的方法！这部分在教程3中会提及一点点
            5-2-3-3：分析不出来？过于复杂？甚至还有签名之类不可逆的东西？没关系，还记得永远是备选项的那个方法吗~ 尝试[5]编写hook代码实现文本替换，绕开烦人的封包加密吧~

6 其他的一些程序处理（锦上添花，不做也无所谓）
    6.1：修改标题
        （[1或4]教程13：标题的修改思路）
        6.1-1：如果是明文脚本，或者之前对虚拟机脚本进行了很完整的分析，可能能在脚本中找到并修改标题。
        6.1-2：通过API HOOK修改标题
    6.2：程序UI汉化
        （[1或4]教程14：一些程序UI文本的修改思路）


0 外传
这里是一些很多地方都会用得到的一些进阶的操作教程，在其他教程里用到时会被引用，或者也可以单独拿来看看。

[2] 二进制编辑器的使用
[3]X64dbg的基本操作
[4]简单的API HOOK实现方法
[5]利用hook修改内存、寄存器和栈中的值
[2或4]DLL注入的几种方法
[4]利用Pillow库实现简单的图片处理和文本渲染